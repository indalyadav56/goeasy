package main

import (
	"fmt"
	"net/http"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"{{.ModuleName}}/pkg/db"
	"{{.ModuleName}}/pkg/logger"
	{{if .IsMonolith}}
	{{.EntityName}}_app "{{.ModuleName}}/internal/{{.EntityName}}/application"
	{{.EntityName}}_handlers "{{.ModuleName}}/internal/{{.EntityName}}/interface/http/v1/handlers"
	{{.EntityName}}_routes "{{.ModuleName}}/internal/{{.EntityName}}/interface/http/v1/routes"
	{{.EntityName}}_postgres "{{.ModuleName}}/internal/{{.EntityName}}/infrastructure/postgres"
	{{if .UseAuth}}
	// Auth-related imports
	auth_app "{{.ModuleName}}/internal/auth/application" 
	auth_handlers "{{.ModuleName}}/internal/auth/interface/http/v1/handlers"
	auth_routes "{{.ModuleName}}/internal/auth/interface/http/v1/routes"
	user_app "{{.ModuleName}}/internal/user/application" 
	user_handlers "{{.ModuleName}}/internal/user/interface/http/v1/handlers"
	user_routes "{{.ModuleName}}/internal/user/interface/http/v1/routes"
	user_postgres "{{.ModuleName}}/internal/user/infrastructure/postgres"
	role_app "{{.ModuleName}}/internal/role/application" 
	role_handlers "{{.ModuleName}}/internal/role/interface/http/v1/handlers"
	role_routes "{{.ModuleName}}/internal/role/interface/http/v1/routes"
	role_postgres "{{.ModuleName}}/internal/role/infrastructure/postgres"
	permission_app "{{.ModuleName}}/internal/permission/application" 
	permission_handlers "{{.ModuleName}}/internal/permission/interface/http/v1/handlers"
	permission_routes "{{.ModuleName}}/internal/permission/interface/http/v1/routes"
	permission_postgres "{{.ModuleName}}/internal/permission/infrastructure/postgres"
	auth_middleware "{{.ModuleName}}/internal/shared/middleware"
	{{end}}
	{{else}}
	"{{.ModuleName}}/internal/interface/http/v1/routes"
	"{{.ModuleName}}/internal/interface/http/v1/handlers"
	"{{.ModuleName}}/internal/application/services"
	"{{.ModuleName}}/internal/infrastructure/postgres"
	{{end}}
)

func main() {
	// init db
	dbConn, err := db.InitDB()
	if err != nil {
		fmt.Println(err)
	}
	defer dbConn.Close()

	// init logger
	logger.InitLogger()

	// init router
	r := chi.NewRouter()

	r.Use(middleware.Recoverer)

	{{if .IsMonolith}}
	// Initialize {{.EntityName}} bounded context
	{{.EntityName}}Repo := {{.EntityName}}_postgres.New{{.EntityName | ToPascalCase}}Repository(dbConn)
	{{.EntityName}}Service := {{.EntityName}}_app.New{{.EntityName | ToPascalCase}}Service({{.EntityName}}Repo)
	{{.EntityName}}Handler := {{.EntityName}}_handlers.New{{.EntityName | ToPascalCase}}Handler({{.EntityName}}Service)

	// Register {{.EntityName}} routes
	{{.EntityName}}_routes.Setup{{.EntityName | ToPascalCase}}Routes(r, {{.EntityName}}Handler)

	{{if .UseAuth}}
	// Initialize auth bounded contexts
	// User bounded context
	userRepo := user_postgres.NewUserRepository(dbConn)
	userService := user_app.NewUserService(userRepo)
	userHandler := user_handlers.NewUserHandler(userService)

	// Role bounded context
	roleRepo := role_postgres.NewRoleRepository(dbConn)
	roleService := role_app.NewRoleService(roleRepo)
	roleHandler := role_handlers.NewRoleHandler(roleService)

	// Permission bounded context
	permissionRepo := permission_postgres.NewPermissionRepository(dbConn)
	permissionService := permission_app.NewPermissionService(permissionRepo)
	permissionHandler := permission_handlers.NewPermissionHandler(permissionService)

	// Auth service (depends on user, role, permission services)
	authService := auth_app.NewAuthService(userService, roleService, permissionService)
	authHandler := auth_handlers.NewAuthHandler(authService)

	// Initialize middleware
	authMW := auth_middleware.NewAuthMiddleware(authService, "your-jwt-secret-key")

	// Register auth routes
	auth_routes.RegisterAuthRoutes(r, authHandler)
	user_routes.RegisterUserRoutes(r, userHandler, authMW)
	role_routes.RegisterRoleRoutes(r, roleHandler, authMW)
	permission_routes.RegisterPermissionRoutes(r, permissionHandler, authMW)
	{{end}}
	{{else}}
	// Microservice routes
	r.Mount("/api", routes.Routes())
	{{end}}

	fmt.Println("Server starting on :8080")
	http.ListenAndServe(":8080", r)
}
