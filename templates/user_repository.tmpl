package {{.Package}}

import (
{{if .IsMonolith}}
	"{{.UserEntityImport}}"
{{else}}
	"{{.ModuleName}}/internal/domain/entity"
{{end}}
)

// UserRepository defines the interface for user data operations
type UserRepository interface {
	// Basic CRUD operations
	Create(user *entity.User) error
	FindByID(id uint) (*entity.User, error)
	FindByEmail(email string) (*entity.User, error)
	FindByUsername(username string) (*entity.User, error)
	Update(user *entity.User) error
	Delete(id uint) error
	
	// User listing and filtering
	FindAll(limit, offset int) ([]*entity.User, error)
	FindByStatus(isActive bool, limit, offset int) ([]*entity.User, error)
	Count() (int64, error)
	
	// Role management
	FindByIDWithRoles(id uint) (*entity.User, error)
	AssignRole(userID, roleID uint) error
	RemoveRole(userID, roleID uint) error
	FindUsersByRole(roleName string) ([]*entity.User, error)
	
	// Permission checking
	HasPermission(userID uint, permissionName string) (bool, error)
	GetUserPermissions(userID uint) ([]string, error)
	
	// Search and filtering
	SearchByEmailOrUsername(query string, limit, offset int) ([]*entity.User, error)
	FindUsersCreatedBetween(startDate, endDate string) ([]*entity.User, error)
}
