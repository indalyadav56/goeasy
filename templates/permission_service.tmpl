package {{.Package}}

import (
	"context"
	"errors"
	"fmt"
{{if .IsMonolith}}
	"{{.PermissionEntityImport}}"
	"{{.PermissionRepositoryImport}}"
	roleRepo "{{.RoleRepositoryImport}}"
{{else}}
	"{{.ModuleName}}/internal/domain/entity"
	"{{.ModuleName}}/internal/domain/repository"
{{end}}
	"{{.ModuleName}}/internal/permission/interface/http/v1/dto"
)

type PermissionService struct {
	permissionRepo repository.PermissionRepository
}

func NewPermissionService(permissionRepo repository.PermissionRepository) *PermissionService {
	return &PermissionService{
		permissionRepo: permissionRepo,
	}
}

func (s *PermissionService) CreatePermission(ctx context.Context, name, resource, action, description string) (*dto.PermissionResponse, error) {
	// Check if permission already exists
	existingPermission, _ := s.permissionRepo.FindByName(name)
	if existingPermission != nil {
		return nil, errors.New("permission with this name already exists")
	}

	permission := &entity.Permission{
		Name:        name,
		Resource:    resource,
		Action:      action,
		Description: description,
	}

	err := s.permissionRepo.Create(permission)
	if err != nil {
		return nil, fmt.Errorf("failed to create permission: %w", err)
	}

	return nil, nil
}

// GetPermissionByID retrieves a permission by ID
func (s *PermissionService) GetPermissionByID(ctx context.Context, id uint) (*dto.PermissionResponse, error) {
	permission, err := s.permissionRepo.FindByID(id)
	if err != nil {
		return nil, errors.New("permission not found")
	}

	return &dto.PermissionResponse{
		ID:          permission.ID,
		Name:        permission.Name,
		Resource:    permission.Resource,
		Action:      permission.Action,
		Description: permission.Description,
		CreatedAt:   permission.CreatedAt,
		UpdatedAt:   permission.UpdatedAt,
	}, nil
}

func (s *PermissionService) GetPermissions(ctx context.Context, page, pageSize int) ([]dto.PermissionResponse, int64, error) {
	// permissions, total, err := s.permissionRepo.FindAll(page, pageSize)
	// if err != nil {
	// 	return nil, 0, fmt.Errorf("failed to retrieve permissions: %w", err)
	// }

	// var permissionResponses []dto.PermissionResponse
	// for _, permission := range permissions {
	// 	permissionResponses = append(permissionResponses, dto.PermissionResponse{
	// 		ID:          permission.ID,
	// 		Name:        permission.Name,
	// 		Resource:    permission.Resource,
	// 		Action:      permission.Action,
	// 		Description: permission.Description,
	// 		CreatedAt:   permission.CreatedAt,
	// 		UpdatedAt:   permission.UpdatedAt,
	// 	})
	// }

	return nil, 0, nil
}

func (s *PermissionService) UpdatePermission(ctx context.Context, id uint, name, resource, action, description string) (*dto.PermissionResponse, error) {
	permission, err := s.permissionRepo.FindByID(id)
	if err != nil {
		return nil, errors.New("permission not found")
	}

	// Check if another permission with the same name exists (excluding current permission)
	if name != "" && name != permission.Name {
		existingPermission, _ := s.permissionRepo.FindByName(name)
		if existingPermission != nil && existingPermission.ID != id {
			return nil, errors.New("permission with this name already exists")
		}
		permission.Name = name
	}

	if resource != "" {
		permission.Resource = resource
	}
	if action != "" {
		permission.Action = action
	}
	if description != "" {
		permission.Description = description
	}

	err = s.permissionRepo.Update(permission)
	if err != nil {
		return nil, fmt.Errorf("failed to update permission: %w", err)
	}

	return nil, nil
}

func (s *PermissionService) DeletePermission(ctx context.Context, id uint) error {
	permission, err := s.permissionRepo.FindByID(id)
	if err != nil {
		return errors.New("permission not found")
	}

	// Check if permission is a system permission that shouldn't be deleted
	if permission.Name == "read" || permission.Name == "write" || permission.Name == "delete" {
		return errors.New("system permissions cannot be deleted")
	}

	return s.permissionRepo.Delete(permission.ID)
}

// retrieves permissions for a specific role
func (s *PermissionService) GetPermissionsByRole(ctx context.Context, roleID uint) ([]dto.PermissionResponse, error) {
	// permissions, err := s.permissionRepo.FindByRoleID(roleID)
	// if err != nil {
	// 	return nil, fmt.Errorf("failed to retrieve permissions for role: %w", err)
	// }

	// var permissionResponses []dto.PermissionResponse
	// for _, permission := range permissions {
	// 	permissionResponses = append(permissionResponses, dto.PermissionResponse{
	// 		ID:          permission.ID,
	// 		Name:        permission.Name,
	// 		Resource:    permission.Resource,
	// 		Action:      permission.Action,
	// 		Description: permission.Description,
	// 		CreatedAt:   permission.CreatedAt,
	// 		UpdatedAt:   permission.UpdatedAt,
	// 	})
	// }

	return nil, nil
}

func (s *PermissionService) SearchPermissions(ctx context.Context, query string, page, pageSize int) ([]dto.PermissionResponse, int64, error) {
	// permissions, total, err := s.permissionRepo.Search(query, page, pageSize)
	// if err != nil {
	// 	return nil, 0, fmt.Errorf("failed to search permissions: %w", err)
	// }

	// var permissionResponses []dto.PermissionResponse
	// for _, permission := range permissions {
	// 	permissionResponses = append(permissionResponses, dto.PermissionResponse{
	// 		ID:          permission.ID,
	// 		Name:        permission.Name,
	// 		Resource:    permission.Resource,
	// 		Action:      permission.Action,
	// 		Description: permission.Description,
	// 		CreatedAt:   permission.CreatedAt,
	// 		UpdatedAt:   permission.UpdatedAt,
	// 	})
	// }

	return nil, 0, nil
}
