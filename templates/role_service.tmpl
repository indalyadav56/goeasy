package {{.Package}}

import (
	"errors"
{{if .IsMonolith}}
	"{{.RoleEntityImport}}"
	roleRepo "{{.RoleRepositoryImport}}"
	permissionEntity "{{.PermissionEntityImport}}"
	permissionRepo "{{.PermissionRepositoryImport}}"
{{else}}
	"{{.ModuleName}}/internal/domain/entity"
	"{{.ModuleName}}/internal/domain/repository"
{{end}}
	userEntity "{{.ModuleName}}/internal/user/domain/entity"
)

type RoleService struct {
	roleRepo       roleRepo.RoleRepository
	permissionRepo permissionRepo.PermissionRepository
}

func NewRoleService(roleRepo roleRepo.RoleRepository) *RoleService {
	return &RoleService{
		roleRepo: roleRepo,
		// permissionRepo: nil, // Simplified - not injected
	}
}

type CreateRoleRequest struct {
	Name          string `json:"name" validate:"required,min=2"`
	Description   string `json:"description"`
	PermissionIDs []uint `json:"permission_ids"`
}

type UpdateRoleRequest struct {
	Name        string `json:"name" validate:"min=2"`
	Description string `json:"description"`
	IsActive    *bool  `json:"is_active"`
}

func (s *RoleService) GetRoles(limit, offset int) ([]*entity.Role, error) {
	return s.roleRepo.FindAll(limit, offset)
}

func (s *RoleService) GetRole(id uint) (*entity.Role, error) {
	return s.roleRepo.FindByIDWithPermissions(id)
}

func (s *RoleService) CreateRole(req CreateRoleRequest) (*entity.Role, error) {
	// Check if role already exists
	existingRole, _ := s.roleRepo.FindByName(req.Name)
	if existingRole != nil {
		return nil, errors.New("role with this name already exists")
	}

	// Create new role
	role := &entity.Role{
		Name:        req.Name,
		Description: req.Description,
		IsActive:    true,
	}

	// Save role
	if err := s.roleRepo.Create(role); err != nil {
		return nil, err
	}

	// Assign permissions if provided
	for _, permissionID := range req.PermissionIDs {
		if err := s.roleRepo.AssignPermission(role.ID, permissionID); err != nil {
			// Log error but don't fail the role creation
			continue
		}
	}

	// Return role with permissions
	return s.roleRepo.FindByIDWithPermissions(role.ID)
}

func (s *RoleService) UpdateRole(id uint, req UpdateRoleRequest) (*entity.Role, error) {
	role, err := s.roleRepo.FindByID(id)
	if err != nil {
		return nil, errors.New("role not found")
	}

	// Update fields if provided
	if req.Name != "" && req.Name != role.Name {
		// Check if name is already taken
		existingRole, _ := s.roleRepo.FindByName(req.Name)
		if existingRole != nil && existingRole.ID != id {
			return nil, errors.New("role name already taken")
		}
		role.Name = req.Name
	}

	if req.Description != "" {
		role.Description = req.Description
	}

	if req.IsActive != nil {
		role.IsActive = *req.IsActive
	}

	// Save updated role
	if err := s.roleRepo.Update(role); err != nil {
		return nil, err
	}

	return s.roleRepo.FindByIDWithPermissions(id)
}

// DeleteRole deletes a role
func (s *RoleService) DeleteRole(id uint) error {
	role, err := s.roleRepo.FindByID(id)
	if err != nil {
		return errors.New("role not found")
	}

	// Check if role is a system role that shouldn't be deleted
	if role.Name == "admin" || role.Name == "user" {
		return errors.New("system roles cannot be deleted")
	}

	return s.roleRepo.Delete(role.ID)
}

func (s *RoleService) AssignPermission(roleID, permissionID uint) error {
	// Verify role exists
	_, err := s.roleRepo.FindByID(roleID)
	if err != nil {
		return errors.New("role not found")
	}

	// Verify permission exists
	_, err = s.permissionRepo.FindByID(permissionID)
	if err != nil {
		return errors.New("permission not found")
	}

	return s.roleRepo.AssignPermission(roleID, permissionID)
}

func (s *RoleService) RemovePermission(roleID, permissionID uint) error {
	// Verify role exists
	_, err := s.roleRepo.FindByID(roleID)
	if err != nil {
		return errors.New("role not found")
	}

	return s.roleRepo.RemovePermission(roleID, permissionID)
}

func (s *RoleService) GetRolePermissions(roleID uint) ([]*permissionEntity.Permission, error) {
	// Verify role exists
	_, err := s.roleRepo.FindByID(roleID)
	if err != nil {
		return nil, errors.New("role not found")
	}

	return s.permissionRepo.FindPermissionsByRole(roleID)
}

func (s *RoleService) SearchRoles(query string, limit, offset int) ([]*entity.Role, error) {
	return s.roleRepo.SearchByName(query, limit, offset)
}

func (s *RoleService) GetRoleCount() (int64, error) {
	return s.roleRepo.Count()
}

func (s *RoleService) GetRoleUsers(roleID uint) ([]*userEntity.User, error) {
	// Verify role exists
	_, err := s.roleRepo.FindByID(roleID)
	if err != nil {
		return nil, errors.New("role not found")
	}

	return s.roleRepo.GetRoleUsers(roleID)
}
