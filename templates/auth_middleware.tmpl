package {{.Package}}

import (
{{if .UseGin}}
	"net/http"
	
	"github.com/gin-gonic/gin"
{{else}}
	"context"
	"net/http"
{{end}}
	
{{if .IsMonolith}}
	"{{.ModuleName}}/internal/auth/application"
	"{{.ModuleName}}/pkg/auth"
{{else}}
	"{{.ModuleName}}/internal/user/domain/entity"
{{end}}
)

type AuthMiddleware struct {
	authService *application.AuthService
	jwtSecret   string
}

func NewAuthMiddleware(authService *application.AuthService, jwtSecret string) *AuthMiddleware {
	return &AuthMiddleware{
		authService: authService,
		jwtSecret:   jwtSecret,
	}
}

{{if .UseGin}}
func (m *AuthMiddleware) RequireAuth() gin.HandlerFunc {
	return func(c *gin.Context) {
		// Get token from Authorization header
		authHeader := c.GetHeader("Authorization")
		token, err := auth.ExtractTokenFromHeader(authHeader)
		if err != nil {
			c.JSON(http.StatusUnauthorized, gin.H{"error": "Authorization token required"})
			c.Abort()
			return
		}

		// Validate token and get user
		user, err := m.authService.ValidateToken(token)
		if err != nil {
			c.JSON(http.StatusUnauthorized, gin.H{"error": "Invalid or expired token"})
			c.Abort()
			return
		}

		// Set user in context
		c.Set("user", user)
		c.Set("user_id", user.ID)
		
		c.Next()
	}
}

// RequireRole middleware for Gin that requires specific role
func (m *AuthMiddleware) RequireRole(roleName string) gin.HandlerFunc {
	return func(c *gin.Context) {
		// First check authentication
		m.RequireAuth()(c)
		if c.IsAborted() {
			return
		}

		// Get user from context
		// user, exists := c.Get("user")
		// if !exists {
		// 	c.JSON(http.StatusUnauthorized, gin.H{"error": "User not found in context"})
		// 	c.Abort()
		// 	return
		// }

		// Check if user has required role
		if userEntity, ok := user.(*entity.User); ok {
			if !userEntity.HasRole(roleName) {
				c.JSON(http.StatusForbidden, gin.H{"error": "Insufficient permissions"})
				c.Abort()
				return
			}
		}

		c.Next()
	}
}

func (m *AuthMiddleware) RequirePermission(permissionName string) gin.HandlerFunc {
	return func(c *gin.Context) {
		// First check authentication
		m.RequireAuth()(c)
		if c.IsAborted() {
			return
		}

		// Get user from context
		user, exists := c.Get("user")
		if !exists {
			c.JSON(http.StatusUnauthorized, gin.H{"error": "User not found in context"})
			c.Abort()
			return
		}

		// Check if user has required permission
		if userEntity, ok := user.(*entity.User); ok {
			if !userEntity.HasPermission(permissionName) {
				c.JSON(http.StatusForbidden, gin.H{"error": "Insufficient permissions"})
				c.Abort()
				return
			}
		}

		c.Next()
	}
}

{{else}}
func (m *AuthMiddleware) RequireAuth(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// Get token from Authorization header
		authHeader := r.Header.Get("Authorization")
		token, err := auth.ExtractTokenFromHeader(authHeader)
		if err != nil {
			http.Error(w, "Authorization token required", http.StatusUnauthorized)
			return
		}

		// Validate token and get user
		user, err := m.authService.ValidateToken(token)
		if err != nil {
			http.Error(w, "Invalid or expired token", http.StatusUnauthorized)
			return
		}

		// Set user in context
		ctx := context.WithValue(r.Context(), "user", user)
		ctx = context.WithValue(ctx, "user_id", user.ID)
		
		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

func (m *AuthMiddleware) RequireRole(roleName string) func(http.Handler) http.Handler {
	return func(next http.Handler) http.Handler {
		return m.RequireAuth(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			// Get user from context
			// user, ok := r.Context().Value("user").(*entity.User)
			// if !ok {
			// 	http.Error(w, "User not found in context", http.StatusUnauthorized)
			// 	return
			// }

			// // Check if user has required role
			// if !user.HasRole(roleName) {
			// 	http.Error(w, "Insufficient permissions", http.StatusForbidden)
			// 	return
			// }

			next.ServeHTTP(w, r)
		}))
	}
}

func (m *AuthMiddleware) RequirePermission(permissionName string) func(http.Handler) http.Handler {
	return func(next http.Handler) http.Handler {
		return m.RequireAuth(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			// // Get user from context
			// user, ok := r.Context().Value("user").(*entity.User)
			// if !ok {
			// 	http.Error(w, "User not found in context", http.StatusUnauthorized)
			// 	return
			// }

			// // Check if user has required permission
			// if !user.HasPermission(permissionName) {
			// 	http.Error(w, "Insufficient permissions", http.StatusForbidden)
			// 	return
			// }


			next.ServeHTTP(w, r)
		}))
	}
}
{{end}}

{{if .UseGin}}
func (m *AuthMiddleware) OptionalAuth() gin.HandlerFunc {
	return func(c *gin.Context) {
		authHeader := c.GetHeader("Authorization")
		if authHeader != "" {
			token, err := auth.ExtractTokenFromHeader(authHeader)
			if err == nil {
				user, err := m.authService.ValidateToken(token)
				if err == nil {
					c.Set("user", user)
					c.Set("user_id", user.ID)
				}
			}
		}
		c.Next()
	}
}
{{else}}
func (m *AuthMiddleware) OptionalAuth(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		authHeader := r.Header.Get("Authorization")
		if authHeader != "" {
			token, err := auth.ExtractTokenFromHeader(authHeader)
			if err == nil {
				user, err := m.authService.ValidateToken(token)
				if err == nil {
					ctx := context.WithValue(r.Context(), "user", user)
					ctx = context.WithValue(ctx, "user_id", user.ID)
					r = r.WithContext(ctx)
				}
			}
		}
		next.ServeHTTP(w, r)
	})
}
{{end}}

// CORS middleware for handling cross-origin requests
{{if .UseGin}}
func (m *AuthMiddleware) CORS() gin.HandlerFunc {
	return func(c *gin.Context) {
		c.Header("Access-Control-Allow-Origin", "*")
		c.Header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
		c.Header("Access-Control-Allow-Headers", "Origin, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization")
		c.Header("Access-Control-Allow-Credentials", "true")

		if c.Request.Method == "OPTIONS" {
			c.AbortWithStatus(http.StatusNoContent)
			return
		}

		c.Next()
	}
}
{{else}}
func (m *AuthMiddleware) CORS(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Access-Control-Allow-Origin", "*")
		w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
		w.Header().Set("Access-Control-Allow-Headers", "Origin, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization")
		w.Header().Set("Access-Control-Allow-Credentials", "true")

		if r.Method == "OPTIONS" {
			w.WriteHeader(http.StatusNoContent)
			return
		}

		next.ServeHTTP(w, r)
	})
}
{{end}}
