package {{.Package}}

import (
{{if .IsMonolith}}
	"{{.PermissionEntityImport}}"
	roleEntity "{{.RoleEntityImport}}"
{{else}}
	"{{.ModuleName}}/internal/domain/entity"
{{end}}
)

// PermissionRepository defines the interface for permission data operations
type PermissionRepository interface {
	// Basic CRUD operations
	Create(permission *entity.Permission) error
	FindByID(id uint) (*entity.Permission, error)
	FindByName(name string) (*entity.Permission, error)
	Update(permission *entity.Permission) error
	Delete(id uint) error
	
	// Permission listing and filtering
	FindAll(limit, offset int) ([]*entity.Permission, error)
	FindByStatus(isActive bool, limit, offset int) ([]*entity.Permission, error)
	FindByResource(resource string) ([]*entity.Permission, error)
	FindByAction(action string) ([]*entity.Permission, error)
	FindByResourceAndAction(resource, action string) (*entity.Permission, error)
	Count() (int64, error)
	
	// Role management
	GetPermissionRoles(permissionID uint) ([]*roleEntity.Role, error)
	FindPermissionsByRole(roleID uint) ([]*entity.Permission, error)
	
	// User permission checking
	CheckUserPermission(userID uint, permissionName string) (bool, error)
	GetUserPermissions(userID uint) ([]*entity.Permission, error)
	
	// Search and filtering
	SearchByName(query string, limit, offset int) ([]*entity.Permission, error)
	SearchByDescription(query string, limit, offset int) ([]*entity.Permission, error)
	FindPermissionsCreatedBetween(startDate, endDate string) ([]*entity.Permission, error)
	
	// Bulk operations
	CreateBulk(permissions []*entity.Permission) error
	FindByNames(names []string) ([]*entity.Permission, error)
}
