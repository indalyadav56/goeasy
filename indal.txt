package {{.Package}}

import (
{{if .UseGin}}
	"github.com/gin-gonic/gin"
{{else}}
	"github.com/go-chi/chi/v5"
{{end}}
{{if .IsMonolith}}
	"{{.ModuleName}}/internal/auth/interface/http/v1/handlers"
	userHandler "{{.ModuleName}}/internal/user/interface/http/v1/handlers"
{{else}}
	roleHandler "{{.ModuleName}}/internal/role/interface/http/v1/handlers"
{{end}}
	"{{.ModuleName}}/pkg/auth"
)

{{if .UseGin}}
func SetupUserRoutes(router *gin.Engine, userHandler *handlers.UserHandler, authMiddleware *auth.AuthMiddleware) {
	// Public auth routes (no authentication required)
	authGroup := router.Group("/api/v1/auth")
	{
		authGroup.POST("/login", authHandler.Login)
		authGroup.POST("/register", authHandler.Register)
		authGroup.POST("/refresh", authHandler.RefreshToken)
	}

	// Protected auth routes (authentication required)
	protectedAuthGroup := router.Group("/api/v1/auth")
	protectedAuthGroup.Use(authMiddleware.RequireAuth())
	{
		protectedAuthGroup.POST("/logout", authHandler.Logout)
		protectedAuthGroup.GET("/profile", authHandler.Profile)
		protectedAuthGroup.PUT("/profile", authHandler.UpdateProfile)
		protectedAuthGroup.POST("/change-password", authHandler.ChangePassword)
	}
}

func SetupUserRoutes(router *gin.Engine, userHandler *handlers.UserHandler, authMiddleware *auth.AuthMiddleware) {
	userGroup := router.Group("/api/v1/users")
	userGroup.Use(authMiddleware.RequireAuth())
	{
		// User CRUD operations
		userGroup.GET("", authMiddleware.RequirePermission("user:read"), userHandler.GetUsers)
		userGroup.GET("/:id", authMiddleware.RequirePermission("user:read"), userHandler.GetUser)
		userGroup.POST("", authMiddleware.RequirePermission("user:create"), userHandler.CreateUser)
		userGroup.PUT("/:id", authMiddleware.RequirePermission("user:update"), userHandler.UpdateUser)
		userGroup.DELETE("/:id", authMiddleware.RequirePermission("user:delete"), userHandler.DeleteUser)
		
		// User role management
		userGroup.POST("/:id/roles", authMiddleware.RequirePermission("user:update"), userHandler.AssignRole)
		userGroup.DELETE("/:id/roles/:roleId", authMiddleware.RequirePermission("user:update"), userHandler.RemoveRole)
		userGroup.GET("/:id/roles", authMiddleware.RequirePermission("user:read"), userHandler.GetUserRoles)
	}
}
// SetupRoleRoutes sets up role management routes for Gin
func SetupRoleRoutes(router *gin.Engine, roleHandler *handlers.RoleHandler, authMiddleware *auth.AuthMiddleware) {
	roleGroup := router.Group("/api/v1/roles")
	roleGroup.Use(authMiddleware.RequireAuth())
	{
		// Role CRUD operations
		roleGroup.GET("", authMiddleware.RequirePermission("role:read"), roleHandler.GetRoles)
		roleGroup.GET("/:id", authMiddleware.RequirePermission("role:read"), roleHandler.GetRole)
		roleGroup.POST("", authMiddleware.RequirePermission("role:create"), roleHandler.CreateRole)
		roleGroup.PUT("/:id", authMiddleware.RequirePermission("role:update"), roleHandler.UpdateRole)
		roleGroup.DELETE("/:id", authMiddleware.RequirePermission("role:delete"), roleHandler.DeleteRole)
		
		// Role permission management
		roleGroup.POST("/:id/permissions", authMiddleware.RequirePermission("role:update"), roleHandler.AssignPermission)
		roleGroup.DELETE("/:id/permissions/:permissionId", authMiddleware.RequirePermission("role:update"), roleHandler.RemovePermission)
		roleGroup.GET("/:id/permissions", authMiddleware.RequirePermission("role:read"), roleHandler.GetRolePermissions)
	}
}

{{else}}
func RegisterAuthRoutes(router chi.Router, authHandler *handlers.AuthHandler, authMiddleware *auth.AuthMiddleware) {
	// Public auth routes (no authentication required)
	router.Route("/api/v1/auth", func(r chi.Router) {
		r.Post("/login", authHandler.Login)
		r.Post("/register", authHandler.Register)
		r.Post("/refresh", authHandler.RefreshToken)
	})

	// Protected auth routes (authentication required)
	router.Route("/api/v1/auth", func(r chi.Router) {
		r.Use(authMiddleware.RequireAuth)
		r.Post("/logout", authHandler.Logout)
		r.Get("/profile", authHandler.Profile)
		r.Put("/profile", authHandler.UpdateProfile)
		r.Post("/change-password", authHandler.ChangePassword)
	})
}

func SetupUserRoutes(router chi.Router, userHandler *handlers.UserHandler, authMiddleware *auth.AuthMiddleware) {
	router.Route("/api/v1/users", func(r chi.Router) {
		r.Use(authMiddleware.RequireAuth)
		
		// User CRUD operations
		r.With(authMiddleware.RequirePermission("user:read")).Get("/", userHandler.GetUsers)
		r.With(authMiddleware.RequirePermission("user:read")).Get("/{id}", userHandler.GetUser)
		r.With(authMiddleware.RequirePermission("user:create")).Post("/", userHandler.CreateUser)
		r.With(authMiddleware.RequirePermission("user:update")).Put("/{id}", userHandler.UpdateUser)
		r.With(authMiddleware.RequirePermission("user:delete")).Delete("/{id}", userHandler.DeleteUser)
		
		// User role management
		r.With(authMiddleware.RequirePermission("user:update")).Post("/{id}/roles", userHandler.AssignRole)
		r.With(authMiddleware.RequirePermission("user:update")).Delete("/{id}/roles/{roleId}", userHandler.RemoveRole)
		r.With(authMiddleware.RequirePermission("user:read")).Get("/{id}/roles", userHandler.GetUserRoles)
	})
}

// SetupRoleRoutes sets up role management routes for Chi
func SetupRoleRoutes(router chi.Router, roleHandler *handlers.RoleHandler, authMiddleware *auth.AuthMiddleware) {
	router.Route("/api/v1/roles", func(r chi.Router) {
		r.Use(authMiddleware.RequireAuth)
		
		// Role CRUD operations
		r.With(authMiddleware.RequirePermission("role:read")).Get("/", roleHandler.GetRoles)
		r.With(authMiddleware.RequirePermission("role:read")).Get("/{id}", roleHandler.GetRole)
		r.With(authMiddleware.RequirePermission("role:create")).Post("/", roleHandler.CreateRole)
		r.With(authMiddleware.RequirePermission("role:update")).Put("/{id}", roleHandler.UpdateRole)
		r.With(authMiddleware.RequirePermission("role:delete")).Delete("/{id}", roleHandler.DeleteRole)
		
		// Role permission management
		r.With(authMiddleware.RequirePermission("role:update")).Post("/{id}/permissions", roleHandler.AssignPermission)
		r.With(authMiddleware.RequirePermission("role:update")).Delete("/{id}/permissions/{permissionId}", roleHandler.RemovePermission)
		r.With(authMiddleware.RequirePermission("role:read")).Get("/{id}/permissions", roleHandler.GetRolePermissions)
	})
}
{{end}}
